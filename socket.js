const { Server } = require("socket.io");
const message = require("./models/message");
const user = require("./models/user");

function setupSocket(server) {
    const io = new Server(server, {
        cors: {
            origin: '*', // Cho ph√©p b·∫•t k·ª≥ ngu·ªìn n√†o ho·∫∑c ch·ªâ ƒë·ªãnh URL c·ªßa ·ª©ng d·ª•ng React Native c·ªßa b·∫°n
            methods: ['GET', 'POST'],
            allowedHeaders: ['Content-Type'],
        },
        transports: ['websocket', 'polling'],
        // Th√™m 'websocket' ƒë·ªÉ t·ªëi ∆∞u k·∫øt n·ªëi
        // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng polling nh∆∞ ph∆∞∆°ng √°n thay th·∫ø
    });

    // L·∫Øng nghe k·∫øt n·ªëi t·ª´ client
    io.on('connection', (socket) => {
        // console.log(`User connected: ${socket.id}`);

        // socket.on("joinGroup", (groupId) => {
        //     socket.join(groupId);
        //     console.log(`User joined group: ${groupId}`);
        // });

        // // Nh·∫≠n tin nh·∫Øn t·ª´ client
        // socket.on('send_message', (data) => {
        //     console.log('Message received: ', data);

        //     // Ph√°t l·∫°i tin nh·∫Øn cho t·∫•t c·∫£ c√°c client
        //     io.emit('receive_message', data);
        // });
        console.log(`‚úÖ User connected: ${socket.id}`);

        socket.on("joinGroup", (ID_group) => {
            if (!ID_group) {
                console.error("‚ùå Group ID is missing!");
                return;
            }
            socket.join(ID_group);
            console.log(`üë• User ${socket.id} joined group: ${ID_group}`);
        });

        socket.on('send_message', async (data) => {
            const { ID_group, sender, content, type, ID_message_reply } = data;
            // T√¨m th√¥ng tin ng∆∞·ªùi g·ª≠i t·ª´ database
            const checkUser = await user.findById(sender);
            if (checkUser == null) {
                console.log('Kh√¥ng t√¨m th·∫•y user!');
                return;
            }
            // L∆∞u tin nh·∫Øn v√†o database
            const newMessage = new message({
                ID_group,
                sender,
                content,
                type,
                ID_message_reply
            });
            await newMessage.save();

            // Ph√°t l·∫°i tin nh·∫Øn cho t·∫•t c·∫£ c√°c client
            const newMessageSocket = {
                _id: newMessage._id,// t·∫°o newMessage trc m·ªõi c√≥ _id
                ID_group,
                sender,
                content,
                type,
                ID_message_reply,
                displayName: checkUser.displayName,  // Th√™m t√™n hi·ªÉn th·ªã
                avatar: checkUser.avatar,            // Th√™m avatar
                createdAt: newMessage.createdAt,// t·∫°o newMessage trc m·ªõi c√≥ createdAt
            };
            io.to(newMessageSocket.ID_group).emit('receive_message', newMessageSocket);
        });

        // Ng·∫Øt k·∫øt n·ªëi
        socket.on('disconnect', () => {
            console.log(`‚ùå User disconnected: ${socket.id}`);
        });

        socket.on('connect_error', (err) => {
            console.error('‚ùå Socket connection error:', err.message);
        });
    });

    return io;
}

module.exports = setupSocket;